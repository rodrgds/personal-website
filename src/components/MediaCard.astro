---
interface Props {
  title: string;
  year?: string;
  author?: string;
  image: string;
  rating: number;
  comment: string;
  categories: string[];
  favoriteEpisodes?: Array<{
    number?: string;
    guest?: string;
    title: string;
  }>;
}

const { title, year, author, image, rating, comment, categories, favoriteEpisodes } = Astro.props;

function renderStars(rating: number) {
  const fullStars = "★".repeat(rating);
  const emptyStars = "☆".repeat(5 - rating);
  return fullStars + emptyStars;
}

// Function to properly format category names
function formatCategoryName(category: string): string {
  return category
    .split('-')
    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
    .join(' ');
}
---

<div class="media-item" data-categories={categories.join(",")}>
  <div class="media-poster">
    <img src={image} alt={`${title} poster`} loading="lazy">
    <div class="rating">{renderStars(rating)}</div>
  </div>
  <div class="media-info">
    <h3>{title}</h3>
    {year && <p class="year">{year}</p>}
    {author && <p class="author">by {author}</p>}
    <p class="comment">{comment}</p>
    
    {favoriteEpisodes && (
      <div class="favorite-episodes">
        <h4>Favorite Episodes:</h4>
        <ul>
          {favoriteEpisodes.map((episode) => (
            <li>
              {episode.number && <strong>{episode.number}{episode.guest ? ` - ${episode.guest}:` : ':'}</strong>}
              {!episode.number && <strong>{episode.title}</strong>}
              {episode.number && ` ${episode.title}`}
            </li>
          ))}
        </ul>
      </div>
    )}
    
    <div class="tags">
      {categories.map((category) => (
        <span class="tag">{formatCategoryName(category)}</span>
      ))}
    </div>
  </div>
</div>

<style>
  .media-item {
    background: var(--background-color);
    border: 1px solid #e0e0e0;
    border-radius: 12px;
    overflow: hidden;
    transition: transform 0.2s ease, box-shadow 0.2s ease;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
  }

  .media-item:hover {
    transform: translateY(-4px);
    box-shadow: 0 8px 25px rgba(0,0,0,0.15);
  }

  .media-poster {
    position: relative;
    overflow: hidden;
  }

  .media-poster img {
    width: 100%;
    height: auto;
    display: block;
    transition: transform 0.3s ease;
  }

  .media-item:hover .media-poster img {
    transform: scale(1.05);
  }

  .rating {
    position: absolute;
    top: 8px;
    right: 8px;
    background: rgba(0,0,0,0.8);
    color: #ffd700;
    padding: 4px 8px;
    border-radius: 16px;
    font-size: 0.9rem;
    font-weight: bold;
  }

  .media-info {
    padding: 1.5rem;
  }

  .media-info h3 {
    margin: 0 0 0.5rem 0;
    font-size: 1.3rem;
    color: var(--text-color);
  }

  .year, .author {
    margin: 0 0 1rem 0;
    color: #666;
    font-style: italic;
  }

  .comment {
    margin: 0 0 1rem 0;
    color: var(--text-color);
    line-height: 1.5;
  }

  .tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin-top: 1rem;
  }

  .tag {
    padding: 0.25rem 0.75rem;
    background: var(--link-color);
    color: white;
    border-radius: 12px;
    font-size: 0.8rem;
    font-weight: 500;
  }

  .favorite-episodes {
    margin-top: 1rem;
    padding-top: 1rem;
    border-top: 1px solid #e0e0e0;
  }

  .favorite-episodes h4 {
    margin: 0 0 0.75rem 0;
    font-size: 1rem;
    color: var(--text-color);
  }

  .favorite-episodes ul {
    margin: 0;
    padding-left: 1.2rem;
    list-style-type: disc;
  }

  .favorite-episodes li {
    margin-bottom: 0.5rem;
    color: var(--text-color);
    font-size: 0.95rem;
    line-height: 1.4;
  }

  .favorite-episodes strong {
    color: var(--link-color);
  }

  /* Hidden state for filtered items */
  .media-item.hidden {
    display: none;
  }

  /* Dark mode adjustments */
  @media (prefers-color-scheme: dark) {
    .media-item {
      border-color: #333;
      background: var(--background-color);
    }

    .favorite-episodes {
      border-top-color: #333;
    }
  }
</style>
