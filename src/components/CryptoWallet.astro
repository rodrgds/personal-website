---
import Logo from "../components/Logo.astro";
import { Image } from "astro:assets";

export interface Props {
  crypto: string;
  symbol: string;
  address: string;
  qr?: boolean; // Default is handled below
}

// Set default value for qr
const { crypto, symbol, address, qr = true } = Astro.props as Props;

// Generate unique IDs based on crypto name (or potentially address if guaranteed unique and safe)
// Using crypto name is generally safer for DOM IDs
const safeCryptoId = crypto.toLowerCase().replace(/[^a-z0-9]+/gi, '-');
const canvasId = `qr-canvas-${safeCryptoId}`;
const componentId = `crypto-component-${safeCryptoId}`;
const modalId = `qr-modal-${componentId}`; // Unique modal ID per component instance
const modalTitleId = `qr-modal-title-${componentId}`;
---

<div class="crypto-component-wrapper" id={componentId}>
  <h3>
    <Logo src={crypto.toLowerCase()} alt={crypto + " logo"} size={30} />
    {" "}
    {crypto}
  </h3>
  <div style="width: 100%; margin-bottom: 0.5rem; overflow-wrap: break-word;">
    <code class="good-text">{address}</code>
  </div>
  <div class="flex-container">
    <button data-crypto-button
      class="button"
      id={`${safeCryptoId}-copy-button`}
      onclick="/* ... copy logic ... */ var button = this; var originalText = button.textContent; navigator.clipboard.writeText(button.parentElement.previousElementSibling.textContent.trim()).then(() => { button.textContent = 'Copied!'; button.classList.add('green'); setTimeout(() => { button.textContent = originalText; button.classList.remove('green'); }, 900); }).catch(err => { console.error('Failed to copy: ', err); button.textContent = 'Copy Failed'; setTimeout(() => { button.textContent = originalText; }, 1500); });">
      Copy {symbol} address
    </button>
    {qr && (
      <canvas
        id={canvasId}
        data-address={address}
        class="qr-code-canvas"
        style="image-rendering: pixelated;"
        title={`Click to enlarge QR code for ${address}`}
        aria-label={`QR Code for ${crypto}. Click to enlarge.`}
        role="button"
        tabindex="0"
      ></canvas>
    )}
  </div>
  <hr />

  {qr && (
    <div id={modalId} class="qr-modal" aria-hidden="true" role="dialog" aria-labelledby={modalTitleId} aria-modal="true">
      <div class="modal-content">
        <button class="modal-close-button" aria-label="Close QR Code Modal">&times;</button>
        <h4 id={modalTitleId} style="margin-top: 0; text-align: center; color: var(--link-color);">
          My {crypto} Address
        </h4>
        <img class="modal-qr-image" alt="Enlarged QR Code" src="" style="display: block; margin: 0 auto; image-rendering: pixelated;" />
        <p class="modal-qr-address" style="text-align: center; font-size: 0.9em; word-break: break-all; margin-top: 10px; color: var(--visited-color)"></p>
      </div>
    </div>
  )}

</div>

<script>
  import QRCode from 'qrcode';

  // --- Modal Functions (Now operate on specific modal instance) ---
  function showQrModal(canvasElement, modalElement) {
    if (!modalElement || !canvasElement) {
      console.error("Modal or Canvas element not found for showing!");
      return;
    }
    // Find elements *within this specific modal*
    const modalQrImage = modalElement.querySelector('.modal-qr-image');
    const modalQrAddress = modalElement.querySelector('.modal-qr-address');
    const modalCloseButton = modalElement.querySelector('.modal-close-button');

    if (!modalQrImage || !modalQrAddress) {
      console.error("Modal image or address element not found inside modal:", modalElement.id);
      return;
    }

    try {
      // Generate a higher-resolution data URL for the modal image
      const dataUrl = canvasElement.toDataURL('image/png'); // Get canvas content as PNG
      modalQrImage.src = dataUrl;
      modalQrImage.alt = `Enlarged QR Code for ${canvasElement.dataset.address}`;
      modalQrAddress.textContent = canvasElement.dataset.address || ''; // Display address below
      modalElement.style.display = 'flex'; // Show the modal
      modalElement.setAttribute('aria-hidden', 'false');
      modalCloseButton?.focus(); // Focus the close button for accessibility

      // Store the element that triggered the modal to return focus later
      modalElement.dataset.triggeredBy = canvasElement.id;

    } catch (err) {
      console.error("Error generating QR code data URL for modal:", err);
      modalQrImage.src = '';
      modalQrImage.alt = 'Error loading QR Code';
      modalQrAddress.textContent = 'Could not load QR Code.';
      modalElement.style.display = 'flex';
      modalElement.setAttribute('aria-hidden', 'false');
    }
  }

  function hideQrModal(modalElement) {
    if (!modalElement) return;
    modalElement.style.display = 'none'; // Hide the modal
    modalElement.setAttribute('aria-hidden', 'true');

    // Clear content
    const modalQrImage = modalElement.querySelector('.modal-qr-image');
    const modalQrAddress = modalElement.querySelector('.modal-qr-address');
    if (modalQrImage) modalQrImage.src = '';
    if (modalQrAddress) modalQrAddress.textContent = '';

    // Return focus to the element that opened the modal (optional but good practice)
    const triggerId = modalElement.dataset.triggeredBy;
    if (triggerId) {
        const triggerElement = document.getElementById(triggerId);
        triggerElement?.focus();
        delete modalElement.dataset.triggeredBy; // Clean up
    }
  }

  // --- QR Code Generation (Takes modal as argument now) ---
  async function generateQrCode(canvasElement, modalElement) {
    const address = canvasElement.dataset.address;

    if (!address) {
      console.error(`QR Code Error: Address data attribute missing on canvas #${canvasElement.id}`);
      return;
    }
    if (!modalElement) {
        console.error(`QR Code Error: Corresponding modal element missing for canvas #${canvasElement.id}`);
        return;
    }

    try {
      await QRCode.toCanvas(canvasElement, address, {
        width: 60,
        margin: 1,
        errorCorrectionLevel: 'M'
      });
      // console.log(`QR Code generated successfully for canvas #${canvasElement.id}`);

      // --- Attach click listener AFTER QR is generated ---
      // Only add listener if it hasn't been added before
      if (!canvasElement.dataset.clickListenerAttached) {
          canvasElement.addEventListener('click', () => {
            showQrModal(canvasElement, modalElement); // Pass the specific modal
          });
          canvasElement.dataset.clickListenerAttached = 'true';
      }

       // --- Attach keydown listener AFTER QR is generated ---
       // Only add listener if it hasn't been added before
       if (!canvasElement.dataset.keydownListenerAttached) {
           canvasElement.addEventListener('keydown', (event) => {
             if (event.key === 'Enter' || event.key === ' ') {
               event.preventDefault(); // Prevent spacebar scrolling
               showQrModal(canvasElement, modalElement); // Pass the specific modal
             }
           });
           canvasElement.dataset.keydownListenerAttached = 'true';
       }


    } catch (err) {
      console.error(`QR Code generation failed for canvas #${canvasElement.id}:`, err);
      const ctx = canvasElement.getContext('2d');
      if (ctx) {
        ctx.clearRect(0, 0, canvasElement.width, canvasElement.height);
        ctx.font = '10px sans-serif';
        ctx.fillStyle = 'red';
        ctx.textAlign = 'center';
        ctx.fillText('Error', canvasElement.width / 2, canvasElement.height / 2);
      }
       // Disable clicking/keyboard interaction on error
      canvasElement.style.cursor = 'not-allowed';
      canvasElement.removeAttribute('role');
      canvasElement.removeAttribute('tabindex');
      canvasElement.title = 'Error generating QR Code';
    }
  }

  // --- Initialization Logic ---
  function initializeComponent(componentWrapper) {
    const canvasElement = componentWrapper.querySelector('canvas.qr-code-canvas');
    const modalElement = componentWrapper.querySelector('.qr-modal'); // Find modal *within this wrapper*
    const closeButton = modalElement?.querySelector('.modal-close-button');

    if (canvasElement && modalElement) {
        // Generate QR and attach canvas listeners
        if (!canvasElement.dataset.qrInitialized) {
            generateQrCode(canvasElement, modalElement);
            canvasElement.dataset.qrInitialized = 'true';
        }

        // Attach modal close listeners *once* per modal instance
        if (closeButton && !closeButton.dataset.listenerAttached) {
           closeButton.addEventListener('click', () => hideQrModal(modalElement));
           closeButton.dataset.listenerAttached = 'true';
        }
        // Background click close
        if (!modalElement.dataset.clickListenerAttached) {
            modalElement.addEventListener('click', (event) => {
               // Close only if clicked on the background overlay itself
               if (event.target === modalElement) {
                  hideQrModal(modalElement);
               }
            });
            modalElement.dataset.clickListenerAttached = 'true';
        }
         // Escape key close
         if (!modalElement.dataset.keydownListenerAttached) {
             // Need to listen on the modal when it's open, or globally?
             // Attaching to modal means it only works when modal *or its content* has focus
             // Attaching to document is more robust but needs careful management.
             // Let's attach to modal for simplicity, requires modal or button to have focus.
             modalElement.addEventListener('keydown', (event) => {
                if (event.key === 'Escape') {
                   hideQrModal(modalElement);
                }
             });
             modalElement.dataset.keydownListenerAttached = 'true';
         }
    } else if (componentWrapper.querySelector('.qr-code-canvas')) {
        // Only log error if a canvas exists but modal doesn't (means qr=true but modal failed)
        console.error("Could not find canvas or modal element within wrapper:", componentWrapper.id);
    }
  }

  // Run initializer for all components on the page initially
  function runInitialization() {
    // console.log("Running initialization...");
    document.querySelectorAll('.crypto-component-wrapper').forEach(wrapper => {
      initializeComponent(wrapper);
    });
  }

  // Run on initial load
  // Use 'astro:page-load' which runs once after all content is on the page
  document.addEventListener('astro:page-load', runInitialization);

  // Handle Astro view transitions (if you use them)
  // 'astro:after-swap' runs after new content replaces old content
  document.addEventListener('astro:after-swap', runInitialization);

</script>

<style>
  /* --- Existing Styles --- */
  .button {
    background-color: var(--link-color);
    border: none;
    color: white;
    padding: 0.7rem 1rem;
    text-align: center;
    text-decoration: none !important;
    font-size: 1rem;
    cursor: pointer;
    border-radius: 0.25rem;
    transition: background-color 0.1s ease-out, transform 0.1s ease-out;
  }
  .good-text {
    font-size: 1.2rem;
  }
  @media screen and (max-width: 600px) {
    .good-text {
      font-size: 1rem;
    }
  }
  .button:hover {
    background-color: var(--visited-color);
  }
    .button:active {
        transform: scale(0.98);
    }
  .flex-container {
    display: flex;
    align-items: center;
    gap: 1rem;
    flex-wrap: wrap; /* Allow wrapping on small screens */
  }
  .green {
    background-color: #3f9b42 !important;
  }

  /* Style the small canvas element */
  .qr-code-canvas {
    display: block;
    /* Set desired small size */
    width: 44px !important; /* Roughly matches button height */
    height: 44px !important;
    border: 1px solid #eee;
    border-radius: 0.25rem;
    transition: transform 0.1s ease-out, box-shadow 0.1s ease-out;
    cursor: pointer; /* Indicate it's clickable */
    /* Ensure crisp pixels */
    image-rendering: -moz-crisp-edges;
    image-rendering: -webkit-crisp-edges;
    image-rendering: pixelated;
    image-rendering: crisp-edges;
  }

  .qr-code-canvas:hover,
  .qr-code-canvas:focus { /* Add focus style */
    transform: scale(1.06);
    box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);
      outline: 2px solid var(--link-color); /* Accessibility focus indicator */
      outline-offset: 1px;
  }

    /* --- Modal Styles --- */
  .qr-modal {
    display: none; /* Hidden by default */
    position: fixed; /* Stay in place */
    z-index: 1000; /* Sit on top */
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto; /* Enable scroll if needed */
    background-color: rgba(0, 0, 0, 0.6); /* Black w/ opacity */
    /* Use flexbox to center the content */
    justify-content: center;
    align-items: center;
  }

  .modal-content {
    background-color: #fefefe;
    margin: auto; /* Centered */
    padding: 20px;
    border: 1px solid #888;
    width: 80%; /* Could be more specific, e.g., 300px */
    max-width: 350px; /* Max width for the modal */
    border-radius: 5px;
    position: relative; /* For positioning the close button */
    box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);
    animation-name: animatetop;
    animation-duration: 0.3s
  }

    /* Add Animation */
  @keyframes animatetop {
    from {top: -300px; opacity: 0}
    to {top: 0; opacity: 1}
  }


  .modal-close-button {
    color: #aaa;
    position: absolute;
    top: 5px;
    right: 10px;
    font-size: 28px;
    font-weight: bold;
    border: none;
    background: none;
    cursor: pointer;
    padding: 0 5px;
    line-height: 1;
  }

  .modal-close-button:hover,
  .modal-close-button:focus {
    color: black;
    text-decoration: none;
    cursor: pointer;
    outline: none;
  }

    /* Style for the image inside the modal */
    /* Use class selector instead of ID */
    .modal-qr-image {
        max-width: 100%; /* Ensure it fits */
        height: auto; /* Maintain aspect ratio */
    }
    /* Use class selector */
    .modal-qr-address {
      /* Styles already defined inline, but could be moved here */
    }

</style>