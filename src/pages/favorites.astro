---
import BaseHead from "../components/BaseHead.astro";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import { SITE_TITLE } from "../config";
import favoritesData from "../data/favorites.json";

const title = "Favorites";
const description = "My favorite movies, shows, podcasts, books, blogs, articles, videos, and cool stuff.";

// Default icons for sections when no specific icon is provided
const getDefaultIcon = (section: string) => {
  switch (section) {
    case 'movies': return 'ÔøΩ';
    case 'shows': return 'ÔøΩ';
    case 'podcasts': return 'üéß';
    case 'books': return 'ÔøΩ';
    case 'blogs': return '‚úçÔ∏è';
    case 'articles': return 'ÔøΩ';
    case 'videos': return '‚ñ∂Ô∏è';
    case 'cool': return '‚≠ê';
    default: return '‚≠ê';
  }
};
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <BaseHead {title} {description} />
  </head>
  <body>
    <Header title={SITE_TITLE} />
    <main>
      <div class="favorites-container">
        <div class="header-section compact">
          <h1>My Favorites</h1>
          <p>
            A curated collection of my favorite movies, shows, podcasts, books, blogs, articles, videos, and cool stuff that have shaped my thinking. These are the best of the best content I've ever consumed - saved here to revisit as I get older.
          </p>
        </div>

        <!-- Clear filters button (shown only when filters active) -->
        <!-- <div style="display:flex;align-items:center;gap:.5rem;margin-bottom:1rem;">
          <button id="clear-filters" class="clear-btn" style="display:none;">Clear Filters</button>
        </div> -->

        {Object.entries(favoritesData).map(([section, items]) => (
          <section class="content-section" data-section={section}>
            <h2 class="section-title">
              {section === 'cool' ? 'Cool Stuff' : section.charAt(0).toUpperCase() + section.slice(1)}
            </h2>
            <div class="items-list">
              {items.map((item: any) => (
                <div 
                  class="favorite-item"
                  data-item
                  data-categories={JSON.stringify(item.categories || [])}
                >
                  {/* Image/Icon */}
                  <div class="item-image">
                    {item.image ? (
                      <img 
                        src={item.image} 
                        alt={item.title}
                        class={`item-img ${
                          section === 'books' ? 'aspect-book' :
                          section === 'movies' || section === 'shows' ? 'aspect-poster' :
                          'aspect-square'
                        }`}
                      />
                    ) : (
                      <div class="item-icon">
                        {item.icon || getDefaultIcon(section)}
                      </div>
                    )}
                  </div>

                  {/* Content */}
                  <div class="item-content">
                    <div class="item-header">
                      <h3 class="item-title">
                        {item.url ? (
                          <a href={item.url} target="_blank" rel="noopener noreferrer">
                            {item.title}
                          </a>
                        ) : (
                          item.title
                        )}
                      </h3>
                      <div class="item-meta">
                        {item.author && <span class="author">by {item.author}</span>}
                        {item.year && <span class="year">({item.year})</span>}
                        {item.rating && (
                          <span class="rating">
                            {'‚òÖ'.repeat(item.rating)}{'‚òÜ'.repeat(5 - item.rating)}
                          </span>
                        )}
                      </div>
                    </div>
                    {item.comment && (
                      <p class="item-comment">
                        {item.comment}
                      </p>
                    )}

                    {/* Favorite Episodes (for podcasts) */}
                    {section === 'podcasts' && item.favoriteEpisodes && (
                      <div class="favorite-episodes">
                        <h4>Favorite Episodes:</h4>
                        <ul>
                          {item.favoriteEpisodes.map((episode: any) => (
                            <li>
                              {episode.number && <strong>{episode.number}{episode.guest ? ` - ${episode.guest}:` : ':'}</strong>}
                              {!episode.number && <strong>{episode.title}</strong>}
                              {episode.number && ` ${episode.title}`}
                            </li>
                          ))}
                        </ul>
                      </div>
                    )}

                    {/* Tags (shown on hover) */}
                    <div class="item-tags">
                      <div class="tags-list">
                        {(item.categories || []).map((category: string) => (
                          <button 
                            class="tag-pill"
                            data-tag={category}
                            data-tag-category={category}
                          >
                            {category}
                          </button>
                        ))}
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </section>
        ))}
      </div>
    </main>
    <Footer />

  <script>
      // Plain JavaScript (removed TypeScript syntax) for cross-browser execution
      const activeFilters = new Set();

      function initFromURL() {
        const urlParams = new URLSearchParams(window.location.search);
        const tagsParam = urlParams.get('tags');
        if (tagsParam) tagsParam.split(',').forEach(t => t && activeFilters.add(t));
      }
      initFromURL();

      function updateURL() {
        const url = new URL(window.location.href);
        if (activeFilters.size) {
          url.searchParams.set('tags', Array.from(activeFilters).join(','));
        } else {
          url.searchParams.delete('tags');
        }
        window.history.replaceState({}, '', url.toString());
      }

  /**
   * Highlight tag pills within a hovered item matching active filters.
   * @param {*} item
   */
  // @ts-ignore implicit any acceptable here
  function applyHoverHighlightsTo(item) {
        // @ts-ignore
        const pills = item.querySelectorAll('.tag-pill');
        // @ts-ignore
        pills.forEach((p) => {
          const cat = p.getAttribute('data-tag-category');
          if (cat && activeFilters.has(cat)) (p instanceof HTMLElement) && p.classList.add('highlighted');
          else (p instanceof HTMLElement) && p.classList.remove('highlighted');
        });
      }

      function refreshHoveredHighlights() {
        document.querySelectorAll('.favorite-item:hover').forEach(applyHoverHighlightsTo);
      }

      function updateDisplay() {
        document.querySelectorAll('[data-section]').forEach((section) => {
          const items = section.querySelectorAll('[data-item]');
          let visibleCount = 0;
          items.forEach((item) => {
            const categories = JSON.parse(item.getAttribute('data-categories') || '[]');
            const isVisible = !activeFilters.size || Array.from(activeFilters).every(f => categories.includes(f));
            if (item instanceof HTMLElement) item.style.display = isVisible ? 'flex' : 'none';
            if (isVisible) visibleCount++;
          });
          if (section instanceof HTMLElement) section.style.display = visibleCount ? 'block' : 'none';
        });
        // Toggle clear button visibility
        const clearBtn = document.getElementById('clear-filters');
        if (clearBtn) clearBtn.style.display = activeFilters.size ? 'inline-block' : 'none';

        updateURL();
        refreshHoveredHighlights();
      }

  /** @param {*} category */
  // @ts-ignore
  function toggleFilter(category) {
        if (!category) return;
        if (activeFilters.has(category)) activeFilters.delete(category); else activeFilters.add(category);
        updateDisplay();
      }

      function setupHoverHighlighting() {
        document.querySelectorAll('[data-item]').forEach((item) => {
          const el = item;
          // @ts-ignore custom flag
          if (el._hoverBound) return; // custom flag
          // @ts-ignore
          el._hoverBound = true;
          el.addEventListener('mouseenter', () => {
            if (!activeFilters.size) return;
            applyHoverHighlightsTo(el);
          });
          el.addEventListener('mouseleave', () => {
            el.querySelectorAll('.tag-pill').forEach(p => (p instanceof HTMLElement) && p.classList.remove('highlighted'));
          });
        });
      }
      setupHoverHighlighting();

      document.addEventListener('click', (e) => {
        const target = e.target instanceof HTMLElement ? e.target : null;
        if (!target) return;

        const tagPill = target.closest('.tag-pill');
        if (tagPill) {
          const cat = tagPill.getAttribute('data-tag-category');
          if (cat) {
            e.preventDefault();
            toggleFilter(cat);
            const parentItem = tagPill.closest('[data-item]');
            if (parentItem && parentItem.matches(':hover')) applyHoverHighlightsTo(parentItem);
          }
        }

        if (target.id === 'clear-filters' || target.closest('#clear-filters')) {
          activeFilters.clear();
          updateDisplay();
        }
      });

      updateDisplay();
    </script>
  </body>
</html>

<style>
  .favorites-container {
    max-width: 700px;
    margin-left: 0;
    margin-right: auto;
    padding: 0;
  }

  .header-section {
    margin-bottom: 2rem;
    text-align: left;
    max-width: 700px;
    margin-left: 0;
    margin-right: auto;
    padding: 0;
  }

  .header-section.compact h1 {
    font-size: 1.5rem;
    font-weight: 600;
    margin-bottom: 0.5rem;
    color: var(--text-color);
    letter-spacing: -0.01em;
  }

  .header-section.compact p {
    font-size: 1rem;
    color: var(--text-color);
    opacity: 0.7;
    margin: 0;
    font-weight: 400;
    line-height: 1.5;
  }

  .clear-btn {
    font-size: 0.75rem;
    padding: 0.25rem 0.5rem;
    background: #fee2e2;
    color: #dc2626;
    border: none;
    border-radius: 0.25rem;
    cursor: pointer;
    transition: background-color 0.2s;
  }

  .clear-btn:hover {
    background: #fecaca;
  }

  .content-section {
    margin-bottom: 3rem;
  }

  .section-title {
    font-size: 1.5rem;
    margin-bottom: 1.5rem;
    color: var(--text-color);
    text-transform: capitalize;
  }

  .items-list {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }

  .favorite-item {
    display: flex;
    align-items: flex-start;
    gap: 1rem;
    padding: 0.75rem;
    background: var(--background-color);
    border: 1px solid rgba(0, 0, 0, 0.1);
    border-radius: 0.5rem;
    transition: all 0.2s ease;
  }

  .favorite-item:hover {
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
    border-color: var(--link-color);
  }

  .item-image {
    flex-shrink: 0;
  }

  .item-img {
    width: 3rem;
    object-fit: cover;
    border-radius: 0.25rem;
  }

  .aspect-square {
    height: 3rem;
  }

  .aspect-book {
    height: 4rem;
  }

  .aspect-poster {
    height: 4rem;
  }

  .item-icon {
    width: 3rem;
    height: 3rem;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.5rem;
    background: transparent;
    border: 1px solid var(--link-color);
    border-radius: 0.25rem;
    color: var(--link-color);
  }

  .item-content {
    flex: 1;
    min-width: 0;
  }

  .item-header {
    margin-bottom: 0.5rem;
  }

  .item-title {
    font-size: 1rem;
    font-weight: 600;
    margin: 0 0 0.25rem 0;
    color: var(--text-color);
  }

  .item-title a {
    color: var(--text-color);
    text-decoration: none;
    transition: color 0.2s;
  }

  .item-title a:hover {
    color: var(--link-color);
  }

  .item-meta {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.875rem;
    color: var(--text-color);
    opacity: 0.7;
  }

  .rating {
    color: var(--link-color);
    font-size: 0.8rem;
  }

  .item-comment {
    font-size: 0.875rem;
    line-height: 1.4;
    color: var(--text-color);
    margin: 0 0 0.5rem 0;
  }

  .favorite-episodes {
    margin: 0.75rem 0;
    padding-top: 0.75rem;
    border-top: 1px solid rgba(0, 0, 0, 0.1);
  }

  .favorite-episodes h4 {
    margin: 0 0 0.5rem 0;
    font-size: 0.875rem;
    font-weight: 600;
    color: var(--text-color);
  }

  .favorite-episodes ul {
    margin: 0;
    padding-left: 1.2rem;
    list-style-type: disc;
  }

  .favorite-episodes li {
    margin-bottom: 0.25rem;
    color: var(--text-color);
    font-size: 0.8rem;
    line-height: 1.3;
  }

  .favorite-episodes strong {
    color: var(--link-color);
    font-weight: 600;
  }

  .item-tags {
    opacity: 0;
    visibility: hidden;
    height: 0;
    overflow: hidden;
    transition: opacity 0.2s ease, visibility 0.2s ease, height 0.2s ease;
  }

  .favorite-item:hover .item-tags {
    opacity: 1;
    visibility: visible;
    height: auto;
  }

  .tags-list {
    display: flex;
    flex-wrap: wrap;
    gap: 0.25rem;
  }

  .tag-pill {
    font-size: 0.75rem;
    padding: 0.125rem 0.5rem;
    background: transparent;
    color: var(--link-color);
    border: 1px solid var(--link-color);
    border-radius: 0.375rem;
    cursor: pointer;
    transition: all 0.2s;
  }

  .tag-pill:hover {
    background: var(--link-color);
    color: var(--background-color);
  }

  .tag-pill.highlighted {
    background: var(--link-color);
    color: var(--background-color);
    font-weight: 600;
    box-shadow: 0 0 0 2px rgba(255, 136, 0, 0.3);
  }

  /* Dark mode */
  @media (prefers-color-scheme: dark) {
    .favorite-item {
      border-color: rgba(255, 255, 255, 0.1);
    }

    .favorite-item:hover {
      border-color: var(--link-color);
    }

    .favorite-episodes {
      border-top-color: rgba(255, 255, 255, 0.1);
    }
  }

  /* Mobile responsive */
  @media (max-width: 768px) {
    .favorites-container {
      padding: 0 1rem;
    }

    .favorite-item {
      gap: 0.75rem;
    }

    .item-img,
    .item-icon {
      width: 2.5rem;
      height: 2.5rem;
    }

    .aspect-book,
    .aspect-poster {
      height: 3.5rem;
    }

    .item-icon {
      font-size: 1.25rem;
    }
  }
</style>
